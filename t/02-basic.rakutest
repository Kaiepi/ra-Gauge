use v6.d;
use Test;
use Gauge;

plan 25;

{
    my $calls = 0;
    my &block = -> --> True { $calls++ };
    my $it = Gauge::It.new: :&block;
    ok $it ~~ Gauge::Iterator, 'Gauge::It is a type of Gauge::Iterator...';
    lives-ok {
        isa-ok $it.pull-one, Int, '...which produces an integer duration...';
        ok $calls, '...given a call to the block...';
        cmp-ok $it.block, &[eqv], &block, '...which is equivalent to the original...';
    }, '...despite any container it may carry';
};

for Gauge::Poller::Raw, Gauge::Poller::Collected -> \Poller {
    my $it = Poller.new: :1seconds, it => Gauge::It.new: :block({ sleep 0.5 });
    ok $it ~~ Gauge::Iterator, Poller.^name ~ ' is a type of Gauge::Iterator...';
    isa-ok $it.pull-one, Int, '...which produces an integer count...';
    my $begin := now;
    my $count := $it.pull-one;
    my $end := now;
    ok 1 <= $count <= 2, '...which is reasonable...';
    cmp-ok $end - $begin, &[>=], 1, '...taking at least its duration to complete';
}

{
    my $it = Gauge::Throttler.new: :1seconds, it => Gauge::It.new: :block({ (+*...*) });
    ok $it ~~ Gauge::Iterator, 'Gauge::Throttler is a type of Gauge::Iterator...';
    my @stamps[2];
    my $begin := now;
    my $stamp := $it.pull-one;
    @stamps[0] := now - $begin;
    isa-ok $stamp, Int, '...which transparently wraps its iterator...';
    $begin := now;
    $it.pull-one;
    @stamps[1] := now - $begin;
    cmp-ok @stamps[1], &[>], @stamps[0], '...performing a cooldown between iterations';
}

{
    my $begin := now;
    Gauge(-> { <0> <=> <0> }).throttle(1).skip(2);
    my $end := now;
    cmp-ok $end - $begin, &[>=], 1, 'skipping gauged iterations produces their side effects anyway';
}

{
    lives-ok {
        cmp-ok Gauge(-> --> Nil { }).demultiplex(0).iterator.pull-one, &[=:=], IterationEnd,
          'multiplexing gauge across zero threads survives an iteration...'
    }, '...which makes a noop';
}

lives-ok {
    ok (my @ := 1 view Gauge(-> --> Nil { })),
      'an individual view is existent...';
}, '...and is a positional';
if $*KERNEL.cpu-cores > 1 {
    lives-ok {
        ok (my % := 1 view Gauge(-> --> Nil { }).demultiplex(1)),
          'multiplexed views are existent...';
    }, '...and are associative';
}
else {
    skip 'Gauge::Multiplexer needs threads!';
}

if $*KERNEL.cpu-cores > 3 {
    my $it := Gauge(-> --> Nil { });

    my %it := (1 + 2 + 3 + 1) view [switch] $it.clone, $it.clone, $it.clone;
    my @it := %it.keys.cache;
    cmp-ok @it.sort, &[eqv], (@it.min...@it.min + 2),
      'Gauge::Multiplexer can increment multiplexed threads...';

    %it := (1 + 2 + 1) view $it.clone.demultiplex: 3;
    @it := %it.keys.cache;
    cmp-ok @it.sort, &[eqv], (@it.min...@it.min + 2),
      '...and demultiplexed threads alike while ordering bands';
}
else {
    skip 'Gauge::Multiplexer needs threads!', 2;
}
