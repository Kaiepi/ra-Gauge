use v6.d;
use Test;
use Gauge;

plan 12;

my constant SECOND = 1_000_000_000;

{
    my $calls = 0;
    my $it = Gauge(-> { $calls++ }).iterator;
    ok $it ~~ Gauge::Iterator, 'Gauge::It is a type of Gauge::Iterator...';
    isa-ok $it.pull-one, Int, '...which produces an integer duration...';
    ok $calls, '...given a call to the block';
};

{
    my $it = Gauge(-> { sleep 0.5 }).poll(1).iterator;
    ok $it ~~ Gauge::Iterator, 'Gauge::Poller is a type of Gauge::Iterator...';
    isa-ok (my $count = $it.pull-one), Int, '...which produces an integer count...';
    cmp-ok $count, &[~~], (1..2), '...which is reasonable...';
    cmp-ok Gauge(-> { $it.pull-one }).head, &[>=], SECOND, '...taking at least its duration to complete...';
    cmp-ok Gauge(-> { $it.skip-one }).head, &[>=], SECOND, '...even when skipped';
}

{
    my $it = Gauge(-> { (+*...*) }).throttle(1).iterator;
    ok $it ~~ Gauge::Iterator, 'Gauge::Throttler is a type of Gauge::Iterator...';
    isa-ok $it.pull-one, Int, '...which transparently wraps its iterator...';
    cmp-ok Gauge(-> { $it.pull-one }).head, &[>=], SECOND, '...performing a cooldown between iterations...';
    cmp-ok Gauge(-> { $it.skip-one }).head, &[>=], SECOND, '...even when skipped';
}
