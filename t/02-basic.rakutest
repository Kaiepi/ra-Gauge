use v6.d;
use Test;
use Gauge;

plan 21;

{
    my $calls = 0;
    my &block = -> --> True { $calls++ };
    my $it = Gauge::It.new: :&block;
    ok $it ~~ Gauge::Iterator, 'Gauge::It is a type of Gauge::Iterator...';
    lives-ok {
        isa-ok $it.pull-one, Int, '...which produces an integer duration...';
        ok $calls, '...given a call to the block...';
        cmp-ok $it.block, &[eqv], &block, '...which is equivalent to the original...';
    }, '...despite any container it may carry';
};

for Gauge::Poller::Raw, Gauge::Poller::Collected -> \Poller {
    my $it = Poller.new: :1seconds, it => Gauge::It.new: :block({ sleep 0.5 });
    ok $it ~~ Gauge::Iterator, Poller.^name ~ ' is a type of Gauge::Iterator...';
    isa-ok $it.pull-one, Int, '...which produces an integer count...';
    my $begin := now;
    my $count := $it.pull-one;
    my $end := now;
    ok 1 <= $count <= 2, '...which is reasonable...';
    cmp-ok $end - $begin, &[>=], 1, '...taking at least its duration to complete';
}

{
    my $it = Gauge::Throttler.new: :1seconds, it => Gauge::It.new: :block({ (+*...*) });
    ok $it ~~ Gauge::Iterator, 'Gauge::Throttler is a type of Gauge::Iterator...';
    my @stamps[2];
    my $begin := now;
    my $stamp := $it.pull-one;
    @stamps[0] := now - $begin;
    isa-ok $stamp, Int, '...which transparently wraps its iterator...';
    $begin := now;
    $it.pull-one;
    @stamps[1] := now - $begin;
    cmp-ok @stamps[1], &[>], @stamps[0], '...performing a cooldown between iterations';
}

{
    my $begin := now;
    Gauge(-> { <0> <=> <0> }).throttle(1).skip(2);
    my $end := now;
    cmp-ok $end - $begin, &[>=], 1, 'skipping gauged iterations produces their side effects anyway';
}

{
    lives-ok {
        cmp-ok Gauge(-> --> Nil { }).demultiplex(0).iterator.pull-one, &[=:=], IterationEnd,
          'multiplexing gauge across zero threads survives an iteration...'
    }, '...which makes a noop';
}

if $*KERNEL.cpu-cores > 3 {
    my $id = Channel.new;
    my $it = Gauge({ $id.send: $*THREAD.id }).demultiplex(3).iterator;
    $it.pull-one xx (1 + 2 + 1); # walks backwards on each increment
    $id.close;
    my @id := @$id;
    ok @id && @id.unique.reduce(* before *),
      'Gauge::Multiplexer walks its demultiplexed threads incrementally';
}
else {
    skip 'Gauge::Multiplexer needs threads!';
}

if $*KERNEL.cpu-cores > 2 {
    my $id = Channel.new;
    my $it = ([W] Gauge({ $id.send: $*THREAD.id }), Gauge({ $id.send: $*THREAD.id })).iterator;
    $it.pull-one xx (1 + 2 + 1);
    $id.close;
    my @id := @$id;
    ok @id && @id.unique.reduce(* before *),
      'Gauge::Multiplexer walks its multiplexed threads incrementally';
}
else {
    skip 'Gauge::Multiplexer needs threads!';
}
